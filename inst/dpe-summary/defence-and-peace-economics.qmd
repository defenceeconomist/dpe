---
title: "Defence and Peace Economics"
author: "The Defence Economist"
format: dashboard
server: shiny
---

```{r}
#| context: setup
library(shiny)
library(reactable)
library(shinyWidgets)
library(dpe)

data(dpe_summary)
data(dpe_themes)

author <- dpe_summary |>
  dplyr::select(doi, author) |>
  tidyr::unnest(author) |>
  dplyr::group_by(doi) |>
  dplyr::summarise(author = paste(glue::glue("{given} {family}"), collapse = ", "))

dpe_summary <- dpe_summary |>
  dplyr::select(-author) |>
  dplyr::left_join(author, by = "doi")
```


#  {.sidebar}

```{r}
shinyWidgets:::html_dependency_picker_bs(theme = bslib::bs_theme(version = 5))
tags$br()
shinyWidgets::pickerInput(
  inputId = "theme",
  label = "Theme",
  choices  = dpe_themes$theme,
  selected = dpe_themes$theme,
  multiple = TRUE,
  options = pickerOptions(
    container = "body", 
    selectedTextFormat = "count > 1",
    actionsBox = TRUE
    )
)

```

# Table

```{r}
uiOutput("reactable_ui")
```

```{r}
#| context: server
dataset <- reactive({
  
  dpe_df <- dpe_summary |>
      dplyr::filter(primary_theme %in% input$theme |
                    secondary_theme %in% input$theme)
  
  list(
    meta = dpe_df |>
      dplyr::select(
        "title", "author", "volume", "issue", "page_start", "page_end", "url"
        ),
     detail = dpe_df |>
      dplyr::select(aims, data, methods, findings, conclusions, primary_theme, secondary_theme, keywords, jel)
       )
 
})

row_details <- function(index){
  item <- dataset()$detail[index,]
  tagList(
    div(
      style = "padding-left: 40px;",
      reactable(item |> dplyr::select(aims, data, methods, findings, conclusions))
    ),
    div(
      tags$p(tags$b("Primary Theme: "), item |> dplyr::pull(primary_theme)),
      tags$p(tags$b("Secondary Theme: "), item |> dplyr::pull(secondary_theme))
      
    ))
  
}


output$reactable <- renderReactable({
  reactable(
    data = dataset()$meta |> dplyr::select(-url), 
    columns = list(
      title = colDef(cell = function(value, index){
        url <- dataset()$meta[index, "url"] |> dplyr::pull()
        htmltools::tags$a(href = url, target = "_blank", value)
        }, minWidth = 300)
      ),
    details = row_details
    )
})

output$reactable_ui <- renderUI({
  div(class = "dpe-articles",
  h2(class = "title", "Articles"),
  reactableOutput("reactable")
)
})

```